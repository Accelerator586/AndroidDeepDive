package me.accelerator586.retrofitdemo

import android.os.Bundle
import android.util.Log
import android.widget.Toast
import androidx.activity.ComponentActivity
import androidx.activity.compose.setContent
import androidx.activity.enableEdgeToEdge
import androidx.compose.foundation.layout.Box
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.Spacer
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.height
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.rememberScrollState
import androidx.compose.foundation.verticalScroll
import androidx.compose.material3.Button
import androidx.compose.material3.Card
import androidx.compose.material3.CardDefaults
import androidx.compose.material3.CircularProgressIndicator
import androidx.compose.material3.Divider
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.Scaffold
import androidx.compose.material3.Surface
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.runtime.getValue
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.remember
import androidx.compose.runtime.setValue
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.text.font.FontFamily
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.tooling.preview.Preview
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import androidx.lifecycle.lifecycleScope
import kotlinx.coroutines.launch
import me.accelerator586.retrofitdemo.ui.theme.RetrofitDemoTheme
import retrofit2.Call
import retrofit2.Callback
import retrofit2.Response


class MainActivity : ComponentActivity() {
    private val TAG = "MainActivity"

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        enableEdgeToEdge()
        setContent {
            RetrofitDemoTheme {
                Surface(
                    modifier = Modifier.fillMaxSize(),
                    color = MaterialTheme.colorScheme.background
                ) {
                    RetrofitDemoScreen()
                }
            }
        }
    }
    @Composable
    fun RetrofitDemoScreen() {
        var uiState by remember { mutableStateOf<UiState>(UiState.Idle) }
        val context = LocalContext.current

        Column(
            modifier = Modifier
                .fillMaxSize()
                .padding(16.dp),
            horizontalAlignment = Alignment.CenterHorizontally
        ) {
            // Ê†áÈ¢ò
            Text(
                text = "Retrofit Ê∫êÁ†ÅÂ≠¶‰π† Demo",
                fontSize = 24.sp,
                fontWeight = FontWeight.Bold,
                modifier = Modifier.padding(bottom = 24.dp)
            )

            // ÊñπÂºè1ÔºöCallback È£éÊ†º
            Button(
                onClick = {
                    fetchReposWithCallback("square") { state ->
                        uiState = state
                    }
                },
                modifier = Modifier
                    .fillMaxWidth()
                    .padding(bottom = 8.dp)
            ) {
                Text("ÊñπÂºè1: Callback È£éÊ†º")
            }

            // ÊñπÂºè2ÔºöÂçèÁ®ãÈ£éÊ†º
            Button(
                onClick = {
                    lifecycleScope.launch {
                        fetchReposWithCoroutine("square") { state ->
                            uiState = state
                        }
                    }
                },
                modifier = Modifier
                    .fillMaxWidth()
                    .padding(bottom = 8.dp)
            ) {
                Text("ÊñπÂºè2: ÂçèÁ®ãÈ£éÊ†ºÔºàÊé®ËçêÔºâ")
            }

            // ÊñπÂºè3ÔºöÂêåÊ≠•Ë∞ÉÁî®ËØ¥Êòé
            Button(
                onClick = {
                    Toast.makeText(
                        context,
                        "‚ö†Ô∏è ÂêåÊ≠•Ë∞ÉÁî®‰ºöÈòªÂ°û‰∏ªÁ∫øÁ®ãÔºÅ\n\nÂÆûÈôÖÈ°πÁõÆ‰∏≠‰∏çË¶ÅËøôÊ†∑ÂÅö„ÄÇ",
                        Toast.LENGTH_LONG
                    ).show()
                    uiState = UiState.Error(getSyncCallWarning())
                },
                modifier = Modifier
                    .fillMaxWidth()
                    .padding(bottom = 16.dp)
            ) {
                Text("ÊñπÂºè3: ÂêåÊ≠•Ë∞ÉÁî®ÔºàÊºîÁ§∫Ôºâ")
            }

            // ÁªìÊûúÊòæÁ§∫Âå∫Âüü
            ResultDisplay(uiState = uiState)
        }
    }

    /**
     * ÁªìÊûúÊòæÁ§∫ÁªÑ‰ª∂
     */
    @Composable
    fun ResultDisplay(uiState: UiState) {
        Card(
            modifier = Modifier
                .fillMaxWidth(),
            elevation = CardDefaults.cardElevation(defaultElevation = 4.dp)
        ) {
            Box(
                modifier = Modifier
                    .fillMaxSize()
                    .padding(16.dp)
            ) {
                when (uiState) {
                    is UiState.Idle -> {
                        Text(
                            text = "ÁÇπÂáªÊåâÈíÆÂºÄÂßãËØ∑Ê±Ç",
                            modifier = Modifier.align(Alignment.Center)
                        )
                    }
                    is UiState.Loading -> {
                        Column(
                            modifier = Modifier.align(Alignment.Center),
                            horizontalAlignment = Alignment.CenterHorizontally
                        ) {
                            CircularProgressIndicator()
                            Spacer(modifier = Modifier.height(16.dp))
                            Text("Âä†ËΩΩ‰∏≠...")
                        }
                    }
                    is UiState.Success -> {
                        SuccessContent(repos = uiState.repos, method = uiState.method)
                    }
                    is UiState.Error -> {
                        ErrorContent(message = uiState.message)
                    }
                }
            }
        }
    }

    /**
     * ÊàêÂäüÁä∂ÊÄÅÁöÑÂÜÖÂÆπÊòæÁ§∫
     */
    @Composable
    fun SuccessContent(repos: List<Repo>, method: String) {
        Column(
            modifier = Modifier
                .fillMaxSize()
                .verticalScroll(rememberScrollState())
        ) {
            Text(
                text = "‚úÖ $method ÊàêÂäüÔºÅ",
                fontWeight = FontWeight.Bold,
                fontSize = 16.sp,
                color = MaterialTheme.colorScheme.primary
            )
            Text(
                text = "ÊâæÂà∞ ${repos.size} ‰∏™‰ªìÂ∫ì\n",
                modifier = Modifier.padding(vertical = 8.dp)
            )
            Divider()

            repos.take(5).forEach { repo ->
                RepoItem(repo = repo)
                Divider()
            }

            if (repos.size > 5) {
                Text(
                    text = "\n... ËøòÊúâ ${repos.size - 5} ‰∏™‰ªìÂ∫ì",
                    modifier = Modifier.padding(top = 8.dp)
                )
            }
        }
    }

    /**
     * Âçï‰∏™‰ªìÂ∫ìÈ°π
     */
    @Composable
    fun RepoItem(repo: Repo) {
        Column(
            modifier = Modifier
                .fillMaxWidth()
                .padding(vertical = 8.dp)
        ) {
            Text(
                text = "üì¶ ${repo.name}",
                fontWeight = FontWeight.Bold,
                fontSize = 16.sp
            )
            Text(text = "   ‰ΩúËÄÖ: ${repo.owner.login}")
            Text(text = "   ‚≠ê ${repo.stargazersCount} stars")
            repo.language?.let {
                Text(text = "   üíª $it")
            }
            repo.description?.let {
                Text(
                    text = "   üìù $it",
                    fontSize = 12.sp,
                    color = MaterialTheme.colorScheme.onSurfaceVariant
                )
            }
            Text(
                text = "   üîó ${repo.htmlUrl}",
                fontSize = 12.sp,
                color = MaterialTheme.colorScheme.primary
            )
        }
    }

    /**
     * ÈîôËØØÁä∂ÊÄÅÁöÑÂÜÖÂÆπÊòæÁ§∫
     */
    @Composable
    fun ErrorContent(message: String) {
        Column(
            modifier = Modifier
                .fillMaxSize()
                .verticalScroll(rememberScrollState())
        ) {
            Text(
                text = message,
                fontFamily = FontFamily.Monospace,
                fontSize = 14.sp,
                color = MaterialTheme.colorScheme.error
            )
        }
    }

    /**
     * ÊñπÂºè1Ôºö‰º†ÁªüÁöÑ Callback ÊñπÂºè
     *
     * Â≠¶‰π†Ë¶ÅÁÇπÔºö
     * 1. Call.enqueue() ÂºÇÊ≠•ÊâßË°åËØ∑Ê±Ç
     * 2. onResponse() Âú®‰∏ªÁ∫øÁ®ãÂõûË∞É
     * 3. ÈúÄË¶ÅÊâãÂä®Â§ÑÁêÜÊàêÂäüÂíåÂ§±Ë¥•
     *
     * üî• Ë∞ÉËØïÂÖ•Âè£Ôºö
     * üëâ Âú® listRepos() ËøôË°åÊâìÊñ≠ÁÇπ
     * üëâ Step Into ËøõÂÖ•ÔºåËßÇÂØü Retrofit Â¶Ç‰ΩïÂàõÂª∫ Call ÂØπË±°
     */
    private fun fetchReposWithCallback(username: String, onStateChange: (UiState) -> Unit) {
        onStateChange(UiState.Loading)

        val call = RetrofitClient.gitHubService.listRepos(username)

        // üî• Âú®ËøôÈáåÊâìÊñ≠ÁÇπÔºåStep Into ËøõÂÖ• enqueue()
        call.enqueue(object : Callback<List<Repo>> {
            override fun onResponse(call: Call<List<Repo>>, response: Response<List<Repo>>) {
                if (response.isSuccessful) {
                    val repos = response.body()
                    if (repos != null) {
                        onStateChange(UiState.Success(repos, "Callback ÊñπÂºè"))
                        Log.d(TAG, "Success: ${repos.size} repos")
                    } else {
                        onStateChange(UiState.Error("ÂìçÂ∫î‰Ωì‰∏∫Á©∫"))
                    }
                } else {
                    Log.e(TAG, "Error: ${response.code()}")
                    onStateChange(UiState.Error("ÈîôËØØ: ${response.code()}\n${response.message()}"))
                }
            }

            override fun onFailure(call: Call<List<Repo>>, t: Throwable) {
                Log.e(TAG, "Failure", t)
                onStateChange(UiState.Error("Â§±Ë¥•: ${t.message}\n\n${t.stackTraceToString()}"))
            }
        })
    }

    /**
     * ÊñπÂºè2Ôºö‰ΩøÁî®ÂçèÁ®ãÔºàÊé®ËçêÔºâ
     *
     * Â≠¶‰π†Ë¶ÅÁÇπÔºö
     * 1. suspend ÂáΩÊï∞Ëá™Âä®Â§ÑÁêÜÁ∫øÁ®ãÂàáÊç¢
     * 2. ‰ª£Á†ÅÊõ¥ÁÆÄÊ¥ÅÔºåÂÉèÂêåÊ≠•‰ª£Á†Å‰∏ÄÊ†∑
     * 3. ÂºÇÂ∏∏Â§ÑÁêÜÊõ¥‰ºòÈõÖ
     *
     * üî• Ë∞ÉËØïÂÖ•Âè£Ôºö
     * üëâ Âú® listReposAsync() ËøôË°åÊâìÊñ≠ÁÇπ
     * üëâ ÂØπÊØî‰∏é Callback ÊñπÂºèÁöÑÂå∫Âà´
     */
    private suspend fun fetchReposWithCoroutine(username: String, onStateChange: (UiState) -> Unit) {
        onStateChange(UiState.Loading)

        try {
            // üî• Âú®ËøôÈáåÊâìÊñ≠ÁÇπ
            val repos = RetrofitClient.gitHubService.listReposAsync(username)
            onStateChange(UiState.Success(repos, "ÂçèÁ®ãÊñπÂºè"))
            Log.d(TAG, "Success: ${repos.size} repos")
        } catch (e: Exception) {
            Log.e(TAG, "Error", e)
            onStateChange(UiState.Error("ÈîôËØØ: ${e.message}\n\n${e.stackTraceToString()}"))
        }
    }

    /**
     * ÂêåÊ≠•Ë∞ÉÁî®Ë≠¶ÂëäËØ¥Êòé
     */
    private fun getSyncCallWarning(): String {
        return """
            ‚ö†Ô∏è ÂêåÊ≠•Ë∞ÉÁî®ÊºîÁ§∫
            
            ÂêåÊ≠•Ë∞ÉÁî® call.execute() ‰ºöÈòªÂ°ûÂΩìÂâçÁ∫øÁ®ãÔºå
            Âú® Android ‰∏ªÁ∫øÁ®ã‰∏≠‰ºöÂØºËá¥ ANRÔºàÂ∫îÁî®Êó†ÂìçÂ∫îÔºâ„ÄÇ
            
            Ê≠£Á°ÆÂÅöÊ≥ïÔºö
            1. ‰ΩøÁî® call.enqueue() ÂºÇÊ≠•Ë∞ÉÁî®ÔºàÊñπÂºè1Ôºâ
            2. ‰ΩøÁî®ÂçèÁ®ã + suspend ÂáΩÊï∞ÔºàÊñπÂºè2ÔºåÊé®ËçêÔºâ
            3. Â¶ÇÊûúÂøÖÈ°ªÁî® execute()ÔºåÂú®Â≠êÁ∫øÁ®ãË∞ÉÁî®
            
            Ê∫êÁ†ÅÂ≠¶‰π†Âª∫ËÆÆÔºö
            - ÂØπÊØî execute() Âíå enqueue() ÁöÑÂÆûÁé∞
            - ÁêÜËß£ Retrofit ÁöÑÁ∫øÁ®ãÂàáÊç¢Êú∫Âà∂
            - Êü•Áúã CallAdapter Â¶Ç‰ΩïÂ§ÑÁêÜ‰∏çÂêåÁöÑË∞ÉÁî®ÊñπÂºè
        """.trimIndent()
    }
}
